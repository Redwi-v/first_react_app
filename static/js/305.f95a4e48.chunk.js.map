{"version":3,"file":"static/js/305.f95a4e48.chunk.js","mappings":"mLACA,GAAgB,MAAQ,yBAAyB,gBAAkB,mCAAmC,QAAU,2BAA2B,MAAQ,yBAAyB,MAAQ,0B,iDCuF9KA,EAAe,SAAC,GAA+B,IAAD,IAA5BC,QAAAA,OAA4B,SAAZC,EAAY,EAAZA,MACtC,OAAOD,GAAWC,GAChB,gBAAKC,UAAWC,EAAAA,MAAaC,KAAK,QAAQC,UAAU,MAApD,SACGJ,IAED,MASN,GAAeK,EAAAA,EAAAA,KANQ,SAACC,GACtB,MAAO,CACLC,OAAQD,EAAME,YAAYD,UAIS,CAAEE,MAAAA,EAAAA,IAAzC,EAhGkB,SAAC,GAAuB,IAArBA,EAAoB,EAApBA,MAAOF,EAAa,EAAbA,OAE1B,OADAG,QAAQC,IAAIJ,GACRA,GACK,SAAC,KAAD,CAAUK,GAAI,cAWrB,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIC,YAAY,GACtDC,SAAU,SAACC,GACT,IAAMC,EAAS,GAUf,OATKD,EAAOJ,MAGT,2CAA2CM,KAAKF,EAAOJ,OAG9CI,EAAOH,WACjBI,EAAOJ,SAAW,YAFlBI,EAAOL,MAAQ,wBAJfK,EAAOL,MAAQ,WAQVK,GAETE,SAAQ,mCAAE,WAAOH,EAAP,qFAAiBI,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,cAAhC,SACad,EACnBS,EAAOJ,MACPI,EAAOH,SACPG,EAAOF,YAJD,OACFG,EADE,OAMRG,GAAc,GACdH,GAAUI,EAAc,UAAWJ,GAP3B,2CAAF,wDAfV,SAyBG,YAAwC,IAArCK,EAAoC,EAApCA,aAAcL,EAAsB,EAAtBA,OAAQpB,EAAc,EAAdA,QACxB,OACE,UAAC,KAAD,YACE,SAACD,EAAD,CAAcE,MAAOmB,EAAOM,WAE5B,iBAAKxB,UAAWC,EAAAA,MAAhB,WACE,SAAC,KAAD,CAAOD,UAAWC,EAAAA,MAAawB,KAAK,OAAOvB,KAAK,WAChD,SAACL,EAAD,CAAcC,QAASA,EAAQe,MAAOd,MAAOmB,EAAOL,YAEtD,iBAAKb,UAAWC,EAAAA,MAAhB,WACE,SAAC,KAAD,CAAOD,UAAWC,EAAAA,MAAawB,KAAK,WAAWvB,KAAK,cACpD,SAACL,EAAD,CACEC,QAASA,EAAQgB,SACjBf,MAAOmB,EAAOJ,eAIlB,iBAAKd,UAAWC,EAAAA,WAAhB,WACE,SAAC,KAAD,CACED,UAAWC,EAAAA,SACXyB,GAAG,aACHxB,KAAK,aACLuB,KAAK,cAEP,kBAAOzB,UAAWC,EAAAA,gBAAuB0B,QAAQ,aAAjD,iGAKF,mBACE3B,UAAWC,EAAAA,QACXwB,KAAK,SACLG,SAAUL,EAHZ,qDChEZ,EARc,SAAAM,GACb,OACC,gBAAK7B,UAAU,QAAf,UACC,SAAC,EAAD","sources":["webpack://my-app/./src/components/Login/LofinForm/loginForm.module.css?0a08","components/Login/LofinForm/LoginForm.jsx","components/Login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"loginForm_input__XqIEf\",\"rememberMeLable\":\"loginForm_rememberMeLable__tULpz\",\"sendBtn\":\"loginForm_sendBtn__skc0Q\",\"error\":\"loginForm_error__L1C8Q\",\"field\":\"loginForm_field__LYpqY\"};","import style from \"./loginForm.module.css\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../../redux/auth_reduser\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst LoginForm = ({ login, isAuth }) => {\r\n  console.log(isAuth);\r\n  if (isAuth) {\r\n    return <Navigate to={\"/profile\"} />;\r\n  }\r\n\r\n  return (\r\n    // <form action=''>\r\n    // \t<input plaseholder='login' type='text' />\r\n    // \t<input plaseholder='login' type='password' />\r\n    // \t<input type='checkbox' /> remember\r\n    // \t<button type='submit'>send</button>\r\n    // </form>\r\n\r\n    <Formik\r\n      initialValues={{ email: \"\", password: \"\", rememberMe: false }}\r\n      validate={(values) => {\r\n        const errors = {};\r\n        if (!values.email) {\r\n          errors.email = \"Required\";\r\n        } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n          errors.email = \"Invalid email address\";\r\n        } else if (!values.password) {\r\n          errors.password = \"Required\";\r\n        }\r\n        return errors;\r\n      }}\r\n      onSubmit={async (values, { setSubmitting, setFieldError }) => {\r\n        const errors = await login(\r\n          values.email,\r\n          values.password,\r\n          values.rememberMe\r\n        );\r\n        setSubmitting(false);\r\n        errors && setFieldError(\"general\", errors);\r\n      }}\r\n    >\r\n      {({ isSubmitting, errors, touched }) => {\r\n        return (\r\n          <Form>\r\n            <ErrorMessage error={errors.general} />\r\n\r\n            <div className={style.field}>\r\n              <Field className={style.input} type=\"text\" name=\"email\" />\r\n              <ErrorMessage touched={touched.email} error={errors.email} />\r\n            </div>\r\n            <div className={style.field}>\r\n              <Field className={style.input} type=\"password\" name=\"password\" />\r\n              <ErrorMessage\r\n                touched={touched.password}\r\n                error={errors.password}\r\n              />\r\n            </div>\r\n\r\n            <div className={style.rememberMe}>\r\n              <Field\r\n                className={style.checkBox}\r\n                id=\"rememberMe\"\r\n                name=\"rememberMe\"\r\n                type=\"checkbox\"\r\n              />\r\n              <label className={style.rememberMeLable} htmlFor=\"rememberMe\">\r\n                Запомнить меня\r\n              </label>\r\n            </div>\r\n\r\n            <button\r\n              className={style.sendBtn}\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n            >\r\n              Войти\r\n            </button>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst ErrorMessage = ({ touched = true, error }) => {\r\n  return touched && error ? (\r\n    <div className={style.error} name=\"email\" component=\"div\">\r\n      {error}\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nconst mapSateToProps = (state) => {\r\n  return {\r\n    isAuth: state.authReduser.isAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapSateToProps, { login })(LoginForm);\r\n","import LoginReduxForm from './LofinForm/LoginForm';\r\n\r\nconst Login = props => {\r\n\treturn (\r\n\t\t<div className='Login'>\r\n\t\t\t<LoginReduxForm />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Login;\r\n"],"names":["ErrorMessage","touched","error","className","style","name","component","connect","state","isAuth","authReduser","login","console","log","to","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","setSubmitting","setFieldError","isSubmitting","general","type","id","htmlFor","disabled","props"],"sourceRoot":""}